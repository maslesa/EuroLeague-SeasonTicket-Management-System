/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.fan;

import controller.Controller;
import model.Fan;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Ljubomir
 */
public class FanPasswordPage extends javax.swing.JFrame {

    Fan fan;
    Controller k = Controller.getInstance();

    /**
     * Creates new form FanPasswordPage
     */
    public FanPasswordPage(Fan fan) {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        setResizable(false);
        this.fan = fan;
        addListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        btnGoBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        oldPassCh = new javax.swing.JPasswordField();
        newPassCh = new javax.swing.JPasswordField();
        newPassConfCh = new javax.swing.JPasswordField();
        changeProfile = new javax.swing.JButton();
        oldPassChecker = new javax.swing.JTextField();
        newPassChecker = new javax.swing.JTextField();
        newPassConfChecker = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sport tickets shop | Change password");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Change password");
        jTextField1.setBorder(null);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        btnGoBack.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnGoBack.setText("<");
        btnGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBackActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Old password:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("New password:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Confirm new password:");

        changeProfile.setText("Change");
        changeProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeProfileActionPerformed(evt);
            }
        });

        oldPassChecker.setEditable(false);
        oldPassChecker.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        oldPassChecker.setForeground(new java.awt.Color(187, 0, 0));
        oldPassChecker.setBorder(null);

        newPassChecker.setEditable(false);
        newPassChecker.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newPassChecker.setForeground(new java.awt.Color(187, 0, 0));
        newPassChecker.setBorder(null);

        newPassConfChecker.setEditable(false);
        newPassConfChecker.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newPassConfChecker.setForeground(new java.awt.Color(187, 0, 0));
        newPassConfChecker.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oldPassCh, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPassCh, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPassConfCh, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(oldPassChecker, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(newPassChecker)
                    .addComponent(newPassConfChecker))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(changeProfile)
                .addGap(222, 222, 222))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oldPassCh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oldPassChecker, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPassCh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPassChecker, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPassConfCh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPassConfChecker, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(changeProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void btnGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBackActionPerformed
        FanHomePage fhp = new FanHomePage(fan);
        dispose();
    }//GEN-LAST:event_btnGoBackActionPerformed

    private void changeProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeProfileActionPerformed
        if (inputsOk()) {
            char[] newPassChar = newPassCh.getPassword();
            String newPassword = new String(newPassChar);
            k.updatePassword(newPassword, fan);
            fan.setPassword(newPassword);
            JOptionPane.showMessageDialog(rootPane, "Password changed successfully", "Password changed", JOptionPane.INFORMATION_MESSAGE);
            FanHomePage fhp = new FanHomePage(fan);
            dispose();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Inputs error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_changeProfileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoBack;
    private javax.swing.JButton changeProfile;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPasswordField newPassCh;
    private javax.swing.JTextField newPassChecker;
    private javax.swing.JPasswordField newPassConfCh;
    private javax.swing.JTextField newPassConfChecker;
    private javax.swing.JPasswordField oldPassCh;
    private javax.swing.JTextField oldPassChecker;
    // End of variables declaration//GEN-END:variables

    public void addListeners() {
        oldPassCh.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkOldPass(e);
            }

            private void checkOldPass(DocumentEvent e) {
                try {
                    System.out.println("Pass: " + fan.getPassword());
                    String oldPassInput = e.getDocument().getText(0, e.getDocument().getLength());
                    System.out.println(oldPassInput);
                    if (!oldPassInput.equals(fan.getPassword())) {
                        oldPassChecker.setText("Incorrect");
                    } else {
                        oldPassChecker.setText("");
                    }

                } catch (BadLocationException ex) {
                    Logger.getLogger(FanPasswordPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkOldPass(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }

        });

        newPassCh.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                newPassChecker(e);
            }

            public void newPassChecker(DocumentEvent e) {
                try {
                    String passInput = e.getDocument().getText(0, e.getDocument().getLength());
                    if (passInput.length() < 8) {
                        newPassChecker.setText("Min 8 characters");
                    } else if (!hasUppercase(passInput)) {
                        newPassChecker.setText("1 upper letter min");
                    } else if (!hasDigit(passInput)) {
                        newPassChecker.setText("1 digit min");
                    } else {
                        newPassChecker.setText("");
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(FanPasswordPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                newPassChecker(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }

        });

        newPassConfCh.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                newPassConfChecker(e);
            }

            private void newPassConfChecker(DocumentEvent e) {
                try {
                    String passInput = e.getDocument().getText(0, e.getDocument().getLength());
                    char[] newPassChar = newPassCh.getPassword();
                    String newPassConf = new String(newPassChar);
                    if (!passInput.equals(newPassConf)) {
                        newPassConfChecker.setText("Doesn't match");
                    } else {
                        newPassConfChecker.setText("");
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(FanPasswordPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                newPassConfChecker(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }

    private boolean hasUppercase(String pass) {
        for (char c : pass.toCharArray()) {
            if (Character.isUpperCase(c)) {
                return true;
            }
        }
        return false;
    }

    private boolean hasDigit(String pass) {
        for (char c : pass.toCharArray()) {
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }

    private boolean inputsOk() {
        char[] oldPassChar = oldPassCh.getPassword();
        String oldPassword = new String(oldPassChar);
        char[] newPassChar = newPassCh.getPassword();
        String newPassword = new String(newPassChar);
        char[] newPassConfChar = newPassConfCh.getPassword();
        String newPasswordConf = new String(newPassConfChar);

        System.out.println("Old pass: " + fan.getPassword());
        System.out.println("Old pass input: " + oldPassword);
        System.out.println("New pass: " + newPassword);
        System.out.println("New pass conf: " + newPasswordConf);

        if (oldPassword.equals(fan.getPassword()) && newPassword.equals(newPasswordConf)) {
            System.out.println("Vracam tacno");
            return true;
        } else {
            System.out.println("Vracam netacno");
            return false;
        }
    }
}
