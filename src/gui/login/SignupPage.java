/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.login;

import gui.fan.FanHomePage;
import classes.Fan;
import java.time.LocalDate;
import db.DBControllerSignup;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Ljubomir
 */
public class SignupPage extends javax.swing.JFrame implements DBControllerSignup{
    
    private static final String emailPattern = "^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$";
    private static final String phonePattern = "^\\+?[0-9]{7,15}$";
    
    Fan fan;
    
    /**
     * Creates new form SignupPage
     */
    public SignupPage() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        fillDateFields();
        addListener();
    }
    
    public SignupPage(Fan fan){
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        fillDateFields();
        addListener();
        this.fan = fan;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnGoBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        signupBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        inpName = new javax.swing.JTextField();
        inpSurname = new javax.swing.JTextField();
        inpUsername = new javax.swing.JTextField();
        inpEmail = new javax.swing.JTextField();
        inpPhone = new javax.swing.JTextField();
        inpPassword = new javax.swing.JPasswordField();
        inpPasswordConf = new javax.swing.JPasswordField();
        emailCheckerField = new javax.swing.JTextField();
        passCheckerField = new javax.swing.JTextField();
        passConfCheckerField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jcbYear = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jcbMonth = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jcbDay = new javax.swing.JComboBox<>();
        usernameCheckerField = new javax.swing.JTextField();
        phoneCheckerField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sport tickets shop | Signup");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Signup");

        btnGoBack.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnGoBack.setText("<");
        btnGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBackActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Surname:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("Email:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setText("Phone:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel6.setText("Username:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel7.setText("Date of birth:");

        signupBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        signupBtn.setText("Signup");
        signupBtn.setEnabled(false);
        signupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel8.setText("Password:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel9.setText("Confirm password:");

        inpName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        inpName.setToolTipText("");
        inpName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpNameActionPerformed(evt);
            }
        });

        inpSurname.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        inpSurname.setToolTipText("");
        inpSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpSurnameActionPerformed(evt);
            }
        });

        inpUsername.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        inpUsername.setToolTipText("");
        inpUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpUsernameActionPerformed(evt);
            }
        });

        inpEmail.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        inpEmail.setToolTipText("");
        inpEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpEmailActionPerformed(evt);
            }
        });

        inpPhone.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        inpPhone.setToolTipText("");
        inpPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpPhoneActionPerformed(evt);
            }
        });

        inpPassword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        inpPasswordConf.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        emailCheckerField.setEditable(false);
        emailCheckerField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        emailCheckerField.setForeground(new java.awt.Color(202, 34, 34));
        emailCheckerField.setBorder(null);
        emailCheckerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailCheckerFieldActionPerformed(evt);
            }
        });

        passCheckerField.setEditable(false);
        passCheckerField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passCheckerField.setForeground(new java.awt.Color(202, 34, 34));
        passCheckerField.setBorder(null);
        passCheckerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passCheckerFieldActionPerformed(evt);
            }
        });

        passConfCheckerField.setEditable(false);
        passConfCheckerField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passConfCheckerField.setForeground(new java.awt.Color(202, 34, 34));
        passConfCheckerField.setBorder(null);
        passConfCheckerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passConfCheckerFieldActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Year");

        jcbYear.setPreferredSize(new java.awt.Dimension(100, 22));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Month");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Day");

        jcbDay.setPreferredSize(new java.awt.Dimension(70, 22));

        usernameCheckerField.setEditable(false);
        usernameCheckerField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        usernameCheckerField.setForeground(new java.awt.Color(202, 34, 34));
        usernameCheckerField.setBorder(null);
        usernameCheckerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameCheckerFieldActionPerformed(evt);
            }
        });

        phoneCheckerField.setEditable(false);
        phoneCheckerField.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        phoneCheckerField.setForeground(new java.awt.Color(202, 34, 34));
        phoneCheckerField.setBorder(null);
        phoneCheckerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneCheckerFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inpPassword)
                            .addComponent(inpUsername)
                            .addComponent(inpEmail)
                            .addComponent(inpPhone)
                            .addComponent(inpName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inpSurname, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcbMonth, 0, 97, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inpPasswordConf)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passConfCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(signupBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btnGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpSurname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpUsername)
                    .addComponent(usernameCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inpEmail)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpPhone)
                    .addComponent(phoneCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inpPassword)
                            .addComponent(passCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbDay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inpPasswordConf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passConfCheckerField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(signupBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBackActionPerformed
        StartPage sp = new StartPage();
        sp.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnGoBackActionPerformed

    private void signupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupBtnActionPerformed
        String name = inpName.getText();
        String surname = inpSurname.getText();
        String username = inpUsername.getText();
        String email = inpEmail.getText();
        String phone = inpPhone.getText();
        
        LocalDate birthday = makeBirthday();
        
        char[] pass = inpPassword.getPassword();
        String password = new String(pass);
        
        
        if(!inputsOK()){
            JOptionPane.showMessageDialog(rootPane, "Inputs error", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            addNewNavijac(fan);
        }
    }//GEN-LAST:event_signupBtnActionPerformed

    
    
    private void inpNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpNameActionPerformed
    private void inpSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpSurnameActionPerformed
    private void inpUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpUsernameActionPerformed
    private void inpEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpEmailActionPerformed
    private void inpPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpPhoneActionPerformed
    private void emailCheckerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailCheckerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailCheckerFieldActionPerformed
    private void passCheckerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passCheckerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passCheckerFieldActionPerformed
    private void passConfCheckerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passConfCheckerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passConfCheckerFieldActionPerformed

    private void usernameCheckerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameCheckerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameCheckerFieldActionPerformed

    private void phoneCheckerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneCheckerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneCheckerFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoBack;
    private javax.swing.JTextField emailCheckerField;
    private javax.swing.JTextField inpEmail;
    private javax.swing.JTextField inpName;
    private javax.swing.JPasswordField inpPassword;
    private javax.swing.JPasswordField inpPasswordConf;
    private javax.swing.JTextField inpPhone;
    private javax.swing.JTextField inpSurname;
    private javax.swing.JTextField inpUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<Integer> jcbDay;
    private javax.swing.JComboBox<String> jcbMonth;
    private javax.swing.JComboBox<Integer> jcbYear;
    private javax.swing.JTextField passCheckerField;
    private javax.swing.JTextField passConfCheckerField;
    private javax.swing.JTextField phoneCheckerField;
    private javax.swing.JButton signupBtn;
    private javax.swing.JTextField usernameCheckerField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNewNavijac(Fan novi) {
        Connection con = null;
	PreparedStatement preparedStatement = null;

	try {
        	Class.forName("com.mysql.cj.jdbc.Driver");
		con = DriverManager.getConnection("jdbc:mysql://localhost:3306/prosoft", "root", "root");
		System.out.println("uspesno povezano sa bazom");

		String query = "INSERT INTO navijac (name, surname, username, email, birthday, phone, password) VALUES (?, ?, ?, ?, ?, ?, ?)";
		preparedStatement = con.prepareStatement(query);
                preparedStatement.setString(1, novi.getName());
		preparedStatement.setString(2, novi.getSurname());
		preparedStatement.setString(3, novi.getUsername());
                preparedStatement.setString(4, novi.getEmail());
                preparedStatement.setDate(5, java.sql.Date.valueOf(novi.getBirthday()));
                preparedStatement.setString(6, novi.getPhone());
                preparedStatement.setString(7, novi.getPassword());

		int rowsAffected = preparedStatement.executeUpdate();
		if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(rootPane, "User added", "Successful", JOptionPane.INFORMATION_MESSAGE);
                    
                    FanHomePage hp = new FanHomePage(fan);
                    
                    hp.setVisible(true);
                    dispose();
                    
		}else{
                    JOptionPane.showMessageDialog(rootPane, "User not added", "Error", JOptionPane.ERROR_MESSAGE);
                }

	} catch (HeadlessException | ClassNotFoundException | SQLException e) {
		System.out.println(e);
	} finally {
		try {
			if (preparedStatement != null)
				preparedStatement.close();
			if (con != null)
				con.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
    }
    
    private boolean hasUppercase(String pass){
        for(char c : pass.toCharArray()){
            if(Character.isUpperCase(c)) return true;
        }
        return false;
    }
    private boolean hasDigit(String pass){
        for(char c : pass.toCharArray()){
            if(Character.isDigit(c)) return true;
        }
        return false;
    }
    
    private void addListener(){
        inpUsername.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                usernameValidation(e);
            }
            
            private void usernameValidation(DocumentEvent e){
                try {
                    String usernameInput = e.getDocument().getText(0, e.getDocument().getLength());
                    if(userWithThatUsernameExists(usernameInput)){
                        //System.out.println("Treba da se ispise");
                        usernameCheckerField.setText("Username exists");
                        signupBtn.setEnabled(false);
                    }else{
                        usernameCheckerField.setText("");
                    }
                    if(inputsOK()){
                       signupBtn.setEnabled(true);
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(SignupPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                usernameValidation(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            
        });
        
        inpPhone.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                phoneValidate(e);
            }
            
            private void phoneValidate(DocumentEvent e){
                try {
                    String phoneInput = e.getDocument().getText(0, e.getDocument().getLength());
                    if(!phoneInput.matches(phonePattern)){
                        phoneCheckerField.setText("invalid format");
                        signupBtn.setEnabled(false);
                    }else{
                        phoneCheckerField.setText("");
                    }
                    if(inputsOK()){
                       signupBtn.setEnabled(true);
                    }
                    
                } catch (BadLocationException ex) {
                    Logger.getLogger(SignupPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                phoneValidate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            
        });
        
        inpEmail.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                //System.out.println("Insert update");
                emailValidate(e);
            }
            
            private void emailValidate(DocumentEvent e){
                try {
                    String emailInput = e.getDocument().getText(0, e.getDocument().getLength());
                    if(!emailInput.matches(emailPattern)){
                        emailCheckerField.setText("invalid format");
                        signupBtn.setEnabled(false);
                    }else{
                        emailCheckerField.setText("");
                    }
                    if(inputsOK()){
                       signupBtn.setEnabled(true);
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(SignupPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                //System.out.println("Remove update");
                emailValidate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //System.out.println("Change update");
            }
            
        });
        
        inpPassword.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                passwordValidate(e);
            }

            private void passwordValidate(DocumentEvent e){
                try {
                    String passInput = e.getDocument().getText(0, e.getDocument().getLength());
                    if(passInput.length() < 8){
                        passCheckerField.setText("Min 8 characters");
                        signupBtn.setEnabled(false);
                    }else if(!hasUppercase(passInput)){
                        passCheckerField.setText("1 upper letter min");
                        signupBtn.setEnabled(false);
                    }else if(!hasDigit(passInput)){
                        passCheckerField.setText("1 digit min");
                        signupBtn.setEnabled(false);
                    }else{
                        passCheckerField.setText("");
                    }
                    if(inputsOK()){
                       signupBtn.setEnabled(true);
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(SignupPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                passwordValidate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            
        });
        
        inpPasswordConf.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                passwordConfValidate(e);
            }
            
            private void passwordConfValidate(DocumentEvent e){
                try {
                    String passConfInput = e.getDocument().getText(0, e.getDocument().getLength());
                    char[] pass = inpPassword.getPassword();
                    String password = new String(pass);
                    if(!passConfInput.equals(password)){
                        passConfCheckerField.setText("Doesn't match");
                        signupBtn.setEnabled(false);
                    }else{
                        passConfCheckerField.setText("");
                    }
                    if(inputsOK()){
                       signupBtn.setEnabled(true);
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(SignupPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                passwordConfValidate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            
        });
        
        jcbMonth.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                String selectedMonth = (String) jcbMonth.getSelectedItem();
                System.out.println(selectedMonth);
                Integer selectedYear = (Integer) jcbYear.getSelectedItem();
                System.out.println(selectedYear);
                if(selectedYear % 4 == 0 && selectedMonth.equals("February")){
                    jcbDay.removeAllItems();
                    for(int i = 1; i <= 29; i++){
                        jcbDay.addItem(i);
                    }
                }else if(selectedYear % 4 != 0 && selectedMonth.equals("February")){
                    jcbDay.removeAllItems();
                    for(int i = 1; i <= 28; i++){
                        jcbDay.addItem(i);
                    }
                }else if(selectedMonth.equals("April") || selectedMonth.equals("June") || selectedMonth.equals("September") || selectedMonth.equals("November")){
                    jcbDay.removeAllItems();
                    for(int i = 1; i <= 30; i++){
                        jcbDay.addItem(i);
                    }
                }else{
                    jcbDay.removeAllItems();
                    for(int i = 1; i <= 31; i++){
                        jcbDay.addItem(i);
                    }
                }
            }
            
        });
        
        jcbYear.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                Integer selectedYear = (Integer) jcbYear.getSelectedItem();
                System.out.println(selectedYear);
                String selectedMonth = (String) jcbMonth.getSelectedItem();
                System.out.println(selectedMonth);
                if(selectedYear % 4 == 0 && selectedMonth.equals("February")){
                    jcbDay.removeAllItems();
                    for(int i = 1; i <= 29; i++){
                        jcbDay.addItem(i);
                    }
                }else if(selectedYear % 4 != 0 && selectedMonth.equals("February")){
                    jcbDay.removeAllItems();
                    for(int i = 1; i <= 28; i++){
                        jcbDay.addItem(i);
                    }
                }
            }
        });
    }
    
    private boolean inputsOK(){
        
        String email = inpEmail.getText();
        char[] pass = inpPassword.getPassword();
        String password = new String(pass);
        char[] passConf = inpPasswordConf.getPassword();
        String passwordConfirm = new String(passConf);
        String usernameInput = inpUsername.getText();
        String name = inpName.getText();
        String surname = inpSurname.getText();
        String phone = inpPhone.getText();
        
        if(phone.matches(phonePattern) && email.matches(emailPattern) && password.length() >= 8 && hasUppercase(password) && hasDigit(password) && !userWithThatUsernameExists(usernameInput)
                && password.equals(passwordConfirm) && !name.equals("") && !surname.equals("") && !usernameInput.equals("")) return true;
        return false;
    }

    private void fillDateFields(){
        
        int currentYear = LocalDateTime.now().getYear();
        ArrayList<Integer> years = new ArrayList<>();
        for(int i = currentYear - 18; i > currentYear - 120; i--){
            years.add(i);
        }
        for(Integer year : years){
            jcbYear.addItem(year);
        }
        
        ArrayList<String> months = new ArrayList<>();
        months.add("January");
        months.add("February");
        months.add("March");
        months.add("April");
        months.add("May");
        months.add("June");
        months.add("July");
        months.add("August");
        months.add("September");
        months.add("October");
        months.add("November");
        months.add("December");
        for(String month : months){
            jcbMonth.addItem(month);
        }
        
        ArrayList<Integer> days = new ArrayList<>();
        for(int i = 1; i <=31; i++){
            days.add(i);
        }
        for(Integer day : days){
            jcbDay.addItem(day);
        }
        
    }

    private LocalDate makeBirthday(){
        
        LocalDate birthday = null;
        int year = (Integer) jcbYear.getSelectedItem();
        String monthStr = (String) jcbMonth.getSelectedItem();
        int month = 1;
        switch (monthStr) {
            case "January":
                month = 1;
                break;
            case "February":
                month = 2;
                break;
            case "March":
                month = 3;
                break;
            case "April":
                month = 4;
                break;
            case "May":
                month = 5;
                break;
            case "June":
                month = 6;
                break;
            case "July":
                month = 7;
                break;
            case "August":
                month = 8;
                break;
            case "September":
                month = 9;
                break;
            case "October":
                month = 10;
                break;
            case "November":
                month = 11;
                break;
            case "December":
                month = 12;
                break;
            default:
                month = 1;
        }
        int day = (Integer) jcbDay.getSelectedItem();
        
        birthday = LocalDate.of(year, month, day);
        
        return birthday;
    }

    @Override
    public boolean userWithThatUsernameExists(String usernameInput) {
        Connection con = null;
	PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

	try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/prosoft", "root", "root");
            System.out.println("uspesno povezano sa bazom");

            String query = "select username from navijac";
            preparedStatement = con.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                String username = resultSet.getString("username");
                if (usernameInput.equals(username)) {
                    System.out.println("Poklapa se");
                    return true;
                }
            }
            return false;
	} catch (HeadlessException | ClassNotFoundException | SQLException e) {
            System.out.println(e);
	} finally {
            try {
		if (preparedStatement != null)
                    preparedStatement.close();
		if (con != null)
                    con.close();
		} catch (SQLException e) {
                    e.printStackTrace();
		}
	}
        return false;
    }

}
