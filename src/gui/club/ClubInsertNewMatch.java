/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.club;

import controller.Controller;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.Month;
import javax.swing.JSpinner;
import model.Club;
import model.Season;
import java.util.*;
import javax.swing.JOptionPane;
import model.Match;

/**
 *
 * @author Ljubomir
 */
public class ClubInsertNewMatch extends javax.swing.JFrame {

    Club club;
    Match match;
    boolean update = false;
    List<Season> seasons;
    List<Club> clubs;
    Season selectedSeason;
    Controller k = Controller.getInstance();
    int[] minutes = {00, 15, 30, 45};

    /**
     * Creates new form ClubInsertNewMatch
     */
    public ClubInsertNewMatch(Club club) {
        initComponents();
        this.club = club;
        jbtnUpdateMatch.setVisible(false);
        jbtnUpdateNew.setVisible(true);
        seasons = k.getAllSeasons();
        for (Season s : seasons) {
            jcbSeason.addItem(s);
        }
        clubs = k.getAllClubs();
        for (Club c : clubs) {
            if (c.getIdKlub() != club.getIdKlub()) {
                jcbGuest.addItem(c);
            }
        }
        txtHost.setText(club.getFullName());
        txtSeason.setVisible(false);
        txtGuest.setVisible(false);
        addListener();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    public ClubInsertNewMatch(Club club, Match match) {
        initComponents();
        this.update = true;
        this.club = club;
        this.match = match;
        jbtnUpdateNew.setVisible(false);
        jbtnUpdateMatch.setVisible(true);
        jcbSeason.setVisible(false);
        jcbGuest.setVisible(false);
        txtSeason.setText(match.getSeasonName());
        txtHost.setText(match.getHostName());
        txtGuest.setText(match.getGuestName());
        int year = Integer.parseInt(match.getSeasonName().substring(0, 4));
        jcbYear.addItem(year);
        jcbYear.addItem(year + 1);
        addListener();
        jcbYear.setSelectedItem(match.getDateTime().getYear());
        jcbMonth.setSelectedItem(getMonthName(match.getDateTime().getMonthValue()));
        jcbDay.setSelectedItem(match.getDateTime().getDayOfMonth());
        jcbHours.setSelectedItem(match.getDateTime().getHour());
        jcbMinutes.setSelectedItem(match.getDateTime().getMinute());
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGoBack1 = new javax.swing.JButton();
        welcomeMessage = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jcbSeason = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbGuest = new javax.swing.JComboBox<>();
        txtGuest = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jcbYear = new javax.swing.JComboBox<>();
        jcbMonth = new javax.swing.JComboBox<>();
        jcbDay = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jcbHours = new javax.swing.JComboBox<>();
        jcbMinutes = new javax.swing.JComboBox<>();
        jbtnUpdateNew = new javax.swing.JButton();
        txtSeason = new javax.swing.JTextField();
        txtHost = new javax.swing.JTextField();
        jbtnUpdateMatch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sport tickets shop | Insert new match");
        setMinimumSize(new java.awt.Dimension(595, 550));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGoBack1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnGoBack1.setText("<");
        btnGoBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBack1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnGoBack1, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 26, 47, 47));

        welcomeMessage.setEditable(false);
        welcomeMessage.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        welcomeMessage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        welcomeMessage.setText("Insert new match");
        welcomeMessage.setBorder(null);
        welcomeMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeMessageActionPerformed(evt);
            }
        });
        getContentPane().add(welcomeMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 21, 369, 52));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Season:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 105, 86, 34));

        jcbSeason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSeasonActionPerformed(evt);
            }
        });
        getContentPane().add(jcbSeason, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 260, 40));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Host:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 158, 86, 34));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Guest:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 86, 34));

        getContentPane().add(jcbGuest, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 260, 34));

        txtGuest.setEditable(false);
        txtGuest.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txtGuest, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 260, 34));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Date:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 282, 86, 34));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Year");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(218, 251, 63, 28));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Month");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 251, 57, 28));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Day");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 251, 34, 28));

        jcbYear.setPreferredSize(new java.awt.Dimension(100, 22));
        getContentPane().add(jcbYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(204, 285, 92, 30));

        getContentPane().add(jcbMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 285, 101, 30));

        jcbDay.setPreferredSize(new java.awt.Dimension(70, 22));
        getContentPane().add(jcbDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(409, 285, 54, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Time:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 353, 86, 34));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Hour");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 322, 63, 28));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Minutes");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 322, 63, 28));

        jcbHours.setPreferredSize(new java.awt.Dimension(100, 22));
        getContentPane().add(jcbHours, new org.netbeans.lib.awtextra.AbsoluteConstraints(204, 356, 92, 30));

        jcbMinutes.setPreferredSize(new java.awt.Dimension(100, 22));
        getContentPane().add(jcbMinutes, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 356, 92, 30));

        jbtnUpdateNew.setText("Insert match");
        jbtnUpdateNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateNewActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnUpdateNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 430, 176, 41));

        txtSeason.setEditable(false);
        txtSeason.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txtSeason, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 260, 34));

        txtHost.setEditable(false);
        txtHost.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txtHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 260, 34));

        jbtnUpdateMatch.setText("Update match");
        jbtnUpdateMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateMatchActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnUpdateMatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(218, 428, 176, 41));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGoBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBack1ActionPerformed
        if(update){
            ClubAllMatches cam = new ClubAllMatches(club);
            dispose();
        }else{
            ClubHomePage chp = new ClubHomePage(club);
            dispose();
        }
    }//GEN-LAST:event_btnGoBack1ActionPerformed

    private void welcomeMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_welcomeMessageActionPerformed

    private void jbtnUpdateNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateNewActionPerformed
        try {
            Season season = (Season) jcbSeason.getSelectedItem();
            Club guest = (Club) jcbGuest.getSelectedItem();
            LocalDateTime date = makeDate();
            if (date.isBefore(LocalDateTime.now())) {
                JOptionPane.showMessageDialog(rootPane, "Date can not be date before today", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                Match newMatch = new Match(club.getFullName() + " - " + guest.getFullName(), date, club.getIdKlub(), guest.getIdKlub(), season.getIdSezona());
                if (k.insertNewMatch(newMatch)) {
                    JOptionPane.showMessageDialog(rootPane, "New match inserted successfully", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Inputs error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnUpdateNewActionPerformed

    private void jcbSeasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSeasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbSeasonActionPerformed

    private void jbtnUpdateMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateMatchActionPerformed
        LocalDateTime newDate = makeDate();
        if(k.updateMatch(match, newDate)){
            JOptionPane.showMessageDialog(rootPane, "Match has been updated", "Match updated", JOptionPane.INFORMATION_MESSAGE);
            ClubAllMatches cam = new ClubAllMatches(club);
            dispose();
        }else{
            JOptionPane.showMessageDialog(rootPane, "Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnUpdateMatchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoBack1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton jbtnUpdateMatch;
    private javax.swing.JButton jbtnUpdateNew;
    private javax.swing.JComboBox<Integer> jcbDay;
    private javax.swing.JComboBox<Club> jcbGuest;
    private javax.swing.JComboBox<Integer> jcbHours;
    private javax.swing.JComboBox<Integer> jcbMinutes;
    private javax.swing.JComboBox<String> jcbMonth;
    private javax.swing.JComboBox<Season> jcbSeason;
    private javax.swing.JComboBox<Integer> jcbYear;
    private javax.swing.JTextField txtGuest;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtSeason;
    private javax.swing.JTextField welcomeMessage;
    // End of variables declaration//GEN-END:variables

    private void addListener() {

        jcbSeason.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectedSeason = (Season) jcbSeason.getSelectedItem();
                String seasonName = selectedSeason.getName().substring(0, 4);

                //System.out.println(seasonName);
                int season = Integer.parseInt(seasonName);
                jcbYear.removeAllItems();
                jcbYear.addItem(season);
                jcbYear.addItem(season + 1);

            }

        });

        jcbYear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Integer selectedYear = (Integer) jcbYear.getSelectedItem();
                //System.out.println(selectedYear);
                String selectedMonth = (String) jcbMonth.getSelectedItem();
                //System.out.println(selectedMonth);

                if (selectedYear != null && jcbYear.getSelectedIndex() == 0) {
                    jcbMonth.removeAllItems();
                    if (selectedYear == LocalDateTime.now().getYear()) {
                        int month = LocalDateTime.now().getMonthValue();
                        if (month == 9) {
                            jcbMonth.addItem("September");
                            jcbMonth.addItem("October");
                            jcbMonth.addItem("November");
                            jcbMonth.addItem("December");
                        } else if (month == 10) {
                            jcbMonth.addItem("October");
                            jcbMonth.addItem("November");
                            jcbMonth.addItem("December");
                        } else if (month == 11) {
                            jcbMonth.addItem("November");
                            jcbMonth.addItem("December");
                        } else if (month == 12) {
                            jcbMonth.addItem("December");
                        }
                    } else {
                        jcbMonth.addItem("September");
                        jcbMonth.addItem("October");
                        jcbMonth.addItem("November");
                        jcbMonth.addItem("December");
                    }
                } else if (selectedYear != null) {
                    jcbMonth.removeAllItems();
                    if (selectedYear == LocalDateTime.now().getYear()) {
                        int month = LocalDateTime.now().getMonthValue();
                        if (month == 1) {
                            jcbMonth.addItem("January");
                            jcbMonth.addItem("February");
                            jcbMonth.addItem("March");
                            jcbMonth.addItem("April");
                            jcbMonth.addItem("May");
                            jcbMonth.addItem("June");
                        } else if (month == 2) {
                            jcbMonth.addItem("February");
                            jcbMonth.addItem("March");
                            jcbMonth.addItem("April");
                            jcbMonth.addItem("May");
                            jcbMonth.addItem("June");
                        } else if (month == 3) {
                            jcbMonth.addItem("March");
                            jcbMonth.addItem("April");
                            jcbMonth.addItem("May");
                            jcbMonth.addItem("June");
                        } else if (month == 4) {
                            jcbMonth.addItem("April");
                            jcbMonth.addItem("May");
                            jcbMonth.addItem("June");
                        } else if (month == 5) {
                            jcbMonth.addItem("May");
                            jcbMonth.addItem("June");
                        } else if (month == 6) {
                            jcbMonth.addItem("June");
                        }
                    } else {
                        jcbMonth.addItem("January");
                        jcbMonth.addItem("February");
                        jcbMonth.addItem("March");
                        jcbMonth.addItem("April");
                        jcbMonth.addItem("May");
                        jcbMonth.addItem("June");
                    }
                }

                if (selectedMonth != null && selectedYear != null && selectedYear % 4 == 0 && selectedMonth.equals("February")) {
                    jcbDay.removeAllItems();
                    for (int i = 1; i <= 29; i++) {
                        jcbDay.addItem(i);
                    }
                } else if (selectedMonth != null && selectedYear != null && selectedYear % 4 != 0 && selectedMonth.equals("February")) {
                    jcbDay.removeAllItems();
                    for (int i = 1; i <= 28; i++) {
                        jcbDay.addItem(i);
                    }
                }
            }
        });

        jcbMonth.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String selectedMonth = (String) jcbMonth.getSelectedItem();
                //System.out.println(selectedMonth);
                Integer selectedYear = (Integer) jcbYear.getSelectedItem();
                //System.out.println(selectedYear);
                if (selectedMonth != null && selectedYear != null && selectedYear % 4 == 0 && selectedMonth.equals("February")) {
                    jcbDay.removeAllItems();
                    if (selectedYear == LocalDateTime.now().getYear() && selectedMonth.equals(getMonthName(LocalDateTime.now().getMonthValue()))) {
                        int dayToday = LocalDateTime.now().getDayOfMonth();
                        for (int i = dayToday; i <= 29; i++) {
                            jcbDay.addItem(i);
                        }
                    } else {
                        for (int i = 1; i <= 29; i++) {
                            jcbDay.addItem(i);
                        }
                    }
                } else if (selectedMonth != null && selectedYear != null && selectedYear % 4 != 0 && selectedMonth.equals("February")) {
                    jcbDay.removeAllItems();
                    if (selectedYear == LocalDateTime.now().getYear() && selectedMonth.equals(getMonthName(LocalDateTime.now().getMonthValue()))) {
                        int dayToday = LocalDateTime.now().getDayOfMonth();
                        for (int i = dayToday; i <= 28; i++) {
                            jcbDay.addItem(i);
                        }
                    } else {
                        for (int i = 1; i <= 28; i++) {
                            jcbDay.addItem(i);
                        }
                    }
                } else if (selectedMonth != null && selectedYear != null && (selectedMonth.equals("April") || selectedMonth.equals("June") || selectedMonth.equals("September") || selectedMonth.equals("November"))) {
                    jcbDay.removeAllItems();
                    if (selectedYear == LocalDateTime.now().getYear() && selectedMonth.equals(getMonthName(LocalDateTime.now().getMonthValue()))) {
                        int dayToday = LocalDateTime.now().getDayOfMonth();
                        for (int i = dayToday; i <= 30; i++) {
                            jcbDay.addItem(i);
                        }
                    } else {
                        for (int i = 1; i <= 30; i++) {
                            jcbDay.addItem(i);
                        }
                    }
                } else {
                    jcbDay.removeAllItems();
                    if (selectedMonth != null && selectedYear == LocalDateTime.now().getYear() && selectedMonth.equals(getMonthName(LocalDateTime.now().getMonthValue()))) {
                        int dayToday = LocalDateTime.now().getDayOfMonth();
                        for (int i = dayToday; i <= 31; i++) {
                            jcbDay.addItem(i);
                        }
                    } else {
                        for (int i = 1; i <= 31; i++) {
                            jcbDay.addItem(i);
                        }
                    }
                }
            }

        });

        jcbDay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jcbHours.removeAllItems();
                String selectedMonth = (String) jcbMonth.getSelectedItem();
                //System.out.println(selectedMonth);
                Integer selectedYear = (Integer) jcbYear.getSelectedItem();
                //System.out.println(selectedYear);
                Integer selectedDay = (Integer) jcbDay.getSelectedItem();
                int hourToday = LocalDateTime.now().getHour();
                if (selectedDay != null && selectedMonth != null && selectedYear != null && selectedYear == LocalDateTime.now().getYear()
                        && selectedMonth.equals(getMonthName(LocalDateTime.now().getMonthValue())) && selectedDay == LocalDateTime.now().getDayOfMonth()) {
                    if (LocalDateTime.now().getMinute() > 45) {
                        for (int i = hourToday + 1; i <= 22; i++) {
                            jcbHours.addItem(i);
                        }
                    } else {
                        for (int i = hourToday; i <= 22; i++) {
                            jcbHours.addItem(i);
                        }
                    }

                } else {
                    for (int i = 8; i <= 22; i++) {
                        jcbHours.addItem(i);
                    }
                }
            }

        });

        jcbHours.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jcbMinutes.removeAllItems();
                String selectedMonth = (String) jcbMonth.getSelectedItem();
                System.out.println(selectedMonth);
                Integer selectedYear = (Integer) jcbYear.getSelectedItem();
                System.out.println(selectedYear);
                Integer selectedDay = (Integer) jcbDay.getSelectedItem();
                Integer selectedHours = (Integer) jcbHours.getSelectedItem();

                int todayMinutes = LocalDateTime.now().getMinute();

                if (selectedHours != null && selectedDay != null && selectedMonth != null && selectedYear != null && selectedYear == LocalDateTime.now().getYear()
                        && selectedMonth.equals(getMonthName(LocalDateTime.now().getMonthValue())) && selectedDay == LocalDateTime.now().getDayOfMonth()
                        && selectedHours == LocalDateTime.now().getHour()) {
                    if (todayMinutes > 45) {
                        for (int i = LocalDateTime.now().getHour() + 1; i <= 22; i++) {
                            jcbHours.addItem(i);
                        }
                        for (int i = 0; i < minutes.length; i++) {
                            jcbMinutes.addItem(minutes[i]);
                        }
                    } else if (todayMinutes > 30) {
                        for (int i = 3; i < minutes.length; i++) {
                            jcbMinutes.addItem(minutes[i]);
                        }
                    } else if (todayMinutes > 15) {
                        for (int i = 2; i < minutes.length; i++) {
                            jcbMinutes.addItem(minutes[i]);
                        }
                    } else if (todayMinutes > 0) {
                        for (int i = 1; i < minutes.length; i++) {
                            jcbMinutes.addItem(minutes[i]);
                        }
                    }
                } else {
                    for (int i = 0; i < minutes.length; i++) {
                        jcbMinutes.addItem(minutes[i]);
                    }
                }

            }

        });
    }

    private LocalDateTime makeDate() {
        int year = (int) jcbYear.getSelectedItem();
        String monthStr = (String) jcbMonth.getSelectedItem();
        int day = (int) jcbDay.getSelectedItem();
        int hours = (int) jcbHours.getSelectedItem();
        int minutes = (int) jcbMinutes.getSelectedItem();
        int month = 1;
        switch (monthStr) {
            case "January":
                month = 1;
                break;
            case "February":
                month = 2;
                break;
            case "March":
                month = 3;
                break;
            case "April":
                month = 4;
                break;
            case "May":
                month = 5;
                break;
            case "June":
                month = 6;
                break;
            case "July":
                month = 7;
                break;
            case "August":
                month = 8;
                break;
            case "September":
                month = 9;
                break;
            case "October":
                month = 10;
                break;
            case "November":
                month = 11;
                break;
            case "December":
                month = 12;
                break;
            default:
                month = 1;
        }
        LocalDateTime date = LocalDateTime.of(year, month, day, hours, minutes);
        return date;
    }

    private String getMonthName(int index) {
        switch (index) {
            case 1:
                return "January";
            case 2:
                return "February";
            case 3:
                return "March";
            case 4:
                return "April";
            case 5:
                return "May";
            case 6:
                return "June";
            case 7:
                return "July";
            case 8:
                return "August";
            case 9:
                return "September";
            case 10:
                return "October";
            case 11:
                return "November";
            case 12:
                return "December";
            default:
                return "January";
        }
    }

}
